// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class C_BorrowEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_BorrowEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_BorrowEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_BorrowEvent", id.toString(), this);
  }

  static load(id: string): C_BorrowEvent | null {
    return store.get("C_BorrowEvent", id) as C_BorrowEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get borrowRateMode(): BigInt {
    let value = this.get("borrowRateMode");
    return value.toBigInt();
  }

  set borrowRateMode(value: BigInt) {
    this.set("borrowRateMode", Value.fromBigInt(value));
  }

  get borrowRate(): BigInt {
    let value = this.get("borrowRate");
    return value.toBigInt();
  }

  set borrowRate(value: BigInt) {
    this.set("borrowRate", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class C_DepositEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_DepositEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_DepositEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_DepositEvent", id.toString(), this);
  }

  static load(id: string): C_DepositEvent | null {
    return store.get("C_DepositEvent", id) as C_DepositEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class C_FlashLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_FlashLoanEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_FlashLoanEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_FlashLoanEvent", id.toString(), this);
  }

  static load(id: string): C_FlashLoanEvent | null {
    return store.get("C_FlashLoanEvent", id) as C_FlashLoanEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }

  get referralCode(): i32 {
    let value = this.get("referralCode");
    return value.toI32();
  }

  set referralCode(value: i32) {
    this.set("referralCode", Value.fromI32(value));
  }
}

export class C_LiquidationCallEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C_LiquidationCallEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_LiquidationCallEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_LiquidationCallEvent", id.toString(), this);
  }

  static load(id: string): C_LiquidationCallEvent | null {
    return store.get(
      "C_LiquidationCallEvent",
      id
    ) as C_LiquidationCallEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get collateralAsset(): Bytes {
    let value = this.get("collateralAsset");
    return value.toBytes();
  }

  set collateralAsset(value: Bytes) {
    this.set("collateralAsset", Value.fromBytes(value));
  }

  get debtAsset(): Bytes {
    let value = this.get("debtAsset");
    return value.toBytes();
  }

  set debtAsset(value: Bytes) {
    this.set("debtAsset", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get debtToCover(): BigInt {
    let value = this.get("debtToCover");
    return value.toBigInt();
  }

  set debtToCover(value: BigInt) {
    this.set("debtToCover", Value.fromBigInt(value));
  }

  get liquidatedCollateralAmount(): BigInt {
    let value = this.get("liquidatedCollateralAmount");
    return value.toBigInt();
  }

  set liquidatedCollateralAmount(value: BigInt) {
    this.set("liquidatedCollateralAmount", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get receiveAToken(): boolean {
    let value = this.get("receiveAToken");
    return value.toBoolean();
  }

  set receiveAToken(value: boolean) {
    this.set("receiveAToken", Value.fromBoolean(value));
  }
}

export class C_PausedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_PausedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_PausedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_PausedEvent", id.toString(), this);
  }

  static load(id: string): C_PausedEvent | null {
    return store.get("C_PausedEvent", id) as C_PausedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class C_RebalanceStableBorrowRateEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C_RebalanceStableBorrowRateEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_RebalanceStableBorrowRateEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_RebalanceStableBorrowRateEvent", id.toString(), this);
  }

  static load(id: string): C_RebalanceStableBorrowRateEvent | null {
    return store.get(
      "C_RebalanceStableBorrowRateEvent",
      id
    ) as C_RebalanceStableBorrowRateEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class C_RepayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_RepayEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_RepayEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_RepayEvent", id.toString(), this);
  }

  static load(id: string): C_RepayEvent | null {
    return store.get("C_RepayEvent", id) as C_RepayEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get repayer(): Bytes {
    let value = this.get("repayer");
    return value.toBytes();
  }

  set repayer(value: Bytes) {
    this.set("repayer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C_ReserveDataUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C_ReserveDataUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_ReserveDataUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_ReserveDataUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C_ReserveDataUpdatedEvent | null {
    return store.get(
      "C_ReserveDataUpdatedEvent",
      id
    ) as C_ReserveDataUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    return value.toBigInt();
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    return value.toBigInt();
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    return value.toBigInt();
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityIndex(): BigInt {
    let value = this.get("liquidityIndex");
    return value.toBigInt();
  }

  set liquidityIndex(value: BigInt) {
    this.set("liquidityIndex", Value.fromBigInt(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    return value.toBigInt();
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }
}

export class C_ReserveUsedAsCollateralDisabledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C_ReserveUsedAsCollateralDisabledEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_ReserveUsedAsCollateralDisabledEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_ReserveUsedAsCollateralDisabledEvent", id.toString(), this);
  }

  static load(id: string): C_ReserveUsedAsCollateralDisabledEvent | null {
    return store.get(
      "C_ReserveUsedAsCollateralDisabledEvent",
      id
    ) as C_ReserveUsedAsCollateralDisabledEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class C_ReserveUsedAsCollateralEnabledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C_ReserveUsedAsCollateralEnabledEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_ReserveUsedAsCollateralEnabledEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_ReserveUsedAsCollateralEnabledEvent", id.toString(), this);
  }

  static load(id: string): C_ReserveUsedAsCollateralEnabledEvent | null {
    return store.get(
      "C_ReserveUsedAsCollateralEnabledEvent",
      id
    ) as C_ReserveUsedAsCollateralEnabledEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class C_SwapEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_SwapEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_SwapEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_SwapEvent", id.toString(), this);
  }

  static load(id: string): C_SwapEvent | null {
    return store.get("C_SwapEvent", id) as C_SwapEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get rateMode(): BigInt {
    let value = this.get("rateMode");
    return value.toBigInt();
  }

  set rateMode(value: BigInt) {
    this.set("rateMode", Value.fromBigInt(value));
  }
}

export class C_UnpausedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_UnpausedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_UnpausedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_UnpausedEvent", id.toString(), this);
  }

  static load(id: string): C_UnpausedEvent | null {
    return store.get("C_UnpausedEvent", id) as C_UnpausedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class C_WithdrawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C_WithdrawEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C_WithdrawEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C_WithdrawEvent", id.toString(), this);
  }

  static load(id: string): C_WithdrawEvent | null {
    return store.get("C_WithdrawEvent", id) as C_WithdrawEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C1_AddressSetEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C1_AddressSetEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_AddressSetEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_AddressSetEvent", id.toString(), this);
  }

  static load(id: string): C1_AddressSetEvent | null {
    return store.get("C1_AddressSetEvent", id) as C1_AddressSetEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }

  get hasProxy(): boolean {
    let value = this.get("hasProxy");
    return value.toBoolean();
  }

  set hasProxy(value: boolean) {
    this.set("hasProxy", Value.fromBoolean(value));
  }
}

export class C1_ConfigurationAdminUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_ConfigurationAdminUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_ConfigurationAdminUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_ConfigurationAdminUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_ConfigurationAdminUpdatedEvent | null {
    return store.get(
      "C1_ConfigurationAdminUpdatedEvent",
      id
    ) as C1_ConfigurationAdminUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_EmergencyAdminUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_EmergencyAdminUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_EmergencyAdminUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_EmergencyAdminUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_EmergencyAdminUpdatedEvent | null {
    return store.get(
      "C1_EmergencyAdminUpdatedEvent",
      id
    ) as C1_EmergencyAdminUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_LendingPoolCollateralManagerUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_LendingPoolCollateralManagerUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_LendingPoolCollateralManagerUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "C1_LendingPoolCollateralManagerUpdatedEvent",
      id.toString(),
      this
    );
  }

  static load(id: string): C1_LendingPoolCollateralManagerUpdatedEvent | null {
    return store.get(
      "C1_LendingPoolCollateralManagerUpdatedEvent",
      id
    ) as C1_LendingPoolCollateralManagerUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_LendingPoolConfiguratorUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_LendingPoolConfiguratorUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_LendingPoolConfiguratorUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_LendingPoolConfiguratorUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_LendingPoolConfiguratorUpdatedEvent | null {
    return store.get(
      "C1_LendingPoolConfiguratorUpdatedEvent",
      id
    ) as C1_LendingPoolConfiguratorUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_LendingPoolUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_LendingPoolUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_LendingPoolUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_LendingPoolUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_LendingPoolUpdatedEvent | null {
    return store.get(
      "C1_LendingPoolUpdatedEvent",
      id
    ) as C1_LendingPoolUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_LendingRateOracleUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_LendingRateOracleUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_LendingRateOracleUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_LendingRateOracleUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_LendingRateOracleUpdatedEvent | null {
    return store.get(
      "C1_LendingRateOracleUpdatedEvent",
      id
    ) as C1_LendingRateOracleUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_MarketIdSetEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C1_MarketIdSetEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_MarketIdSetEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_MarketIdSetEvent", id.toString(), this);
  }

  static load(id: string): C1_MarketIdSetEvent | null {
    return store.get("C1_MarketIdSetEvent", id) as C1_MarketIdSetEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newMarketId(): string {
    let value = this.get("newMarketId");
    return value.toString();
  }

  set newMarketId(value: string) {
    this.set("newMarketId", Value.fromString(value));
  }
}

export class C1_OwnershipTransferredEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_OwnershipTransferredEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_OwnershipTransferredEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_OwnershipTransferredEvent", id.toString(), this);
  }

  static load(id: string): C1_OwnershipTransferredEvent | null {
    return store.get(
      "C1_OwnershipTransferredEvent",
      id
    ) as C1_OwnershipTransferredEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class C1_PriceOracleUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_PriceOracleUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_PriceOracleUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_PriceOracleUpdatedEvent", id.toString(), this);
  }

  static load(id: string): C1_PriceOracleUpdatedEvent | null {
    return store.get(
      "C1_PriceOracleUpdatedEvent",
      id
    ) as C1_PriceOracleUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C1_ProxyCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C1_ProxyCreatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C1_ProxyCreatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C1_ProxyCreatedEvent", id.toString(), this);
  }

  static load(id: string): C1_ProxyCreatedEvent | null {
    return store.get("C1_ProxyCreatedEvent", id) as C1_ProxyCreatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class C2_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C2_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C2_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C2_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C2_ApprovalEvent | null {
    return store.get("C2_ApprovalEvent", id) as C2_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C2_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C2_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C2_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C2_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C2_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C2_BorrowAllowanceDelegatedEvent",
      id
    ) as C2_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C2_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C2_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C2_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C2_TransferEvent", id.toString(), this);
  }

  static load(id: string): C2_TransferEvent | null {
    return store.get("C2_TransferEvent", id) as C2_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C3_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C3_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C3_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C3_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C3_ApprovalEvent | null {
    return store.get("C3_ApprovalEvent", id) as C3_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C3_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C3_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C3_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C3_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C3_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C3_BorrowAllowanceDelegatedEvent",
      id
    ) as C3_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C3_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C3_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C3_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C3_TransferEvent", id.toString(), this);
  }

  static load(id: string): C3_TransferEvent | null {
    return store.get("C3_TransferEvent", id) as C3_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C4_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C4_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C4_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C4_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C4_ApprovalEvent | null {
    return store.get("C4_ApprovalEvent", id) as C4_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C4_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C4_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C4_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C4_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C4_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C4_BorrowAllowanceDelegatedEvent",
      id
    ) as C4_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C4_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C4_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C4_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C4_TransferEvent", id.toString(), this);
  }

  static load(id: string): C4_TransferEvent | null {
    return store.get("C4_TransferEvent", id) as C4_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C5_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C5_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C5_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C5_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C5_ApprovalEvent | null {
    return store.get("C5_ApprovalEvent", id) as C5_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C5_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C5_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C5_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C5_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C5_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C5_BorrowAllowanceDelegatedEvent",
      id
    ) as C5_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C5_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C5_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C5_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C5_TransferEvent", id.toString(), this);
  }

  static load(id: string): C5_TransferEvent | null {
    return store.get("C5_TransferEvent", id) as C5_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C6_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C6_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C6_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C6_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C6_ApprovalEvent | null {
    return store.get("C6_ApprovalEvent", id) as C6_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C6_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C6_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C6_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C6_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C6_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C6_BorrowAllowanceDelegatedEvent",
      id
    ) as C6_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C6_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C6_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C6_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C6_TransferEvent", id.toString(), this);
  }

  static load(id: string): C6_TransferEvent | null {
    return store.get("C6_TransferEvent", id) as C6_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C7_ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C7_ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C7_ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C7_ApprovalEvent", id.toString(), this);
  }

  static load(id: string): C7_ApprovalEvent | null {
    return store.get("C7_ApprovalEvent", id) as C7_ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class C7_BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save C7_BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C7_BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C7_BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): C7_BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "C7_BorrowAllowanceDelegatedEvent",
      id
    ) as C7_BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class C7_TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save C7_TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save C7_TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("C7_TransferEvent", id.toString(), this);
  }

  static load(id: string): C7_TransferEvent | null {
    return store.get("C7_TransferEvent", id) as C7_TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}
