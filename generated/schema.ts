// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BorrowEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BorrowEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BorrowEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BorrowEvent", id.toString(), this);
  }

  static load(id: string): BorrowEvent | null {
    return store.get("BorrowEvent", id) as BorrowEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get borrowRateMode(): BigInt {
    let value = this.get("borrowRateMode");
    return value.toBigInt();
  }

  set borrowRateMode(value: BigInt) {
    this.set("borrowRateMode", Value.fromBigInt(value));
  }

  get borrowRate(): BigInt {
    let value = this.get("borrowRate");
    return value.toBigInt();
  }

  set borrowRate(value: BigInt) {
    this.set("borrowRate", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class DepositEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositEvent", id.toString(), this);
  }

  static load(id: string): DepositEvent | null {
    return store.get("DepositEvent", id) as DepositEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class FlashLoanEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlashLoanEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlashLoanEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlashLoanEvent", id.toString(), this);
  }

  static load(id: string): FlashLoanEvent | null {
    return store.get("FlashLoanEvent", id) as FlashLoanEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }

  get referralCode(): i32 {
    let value = this.get("referralCode");
    return value.toI32();
  }

  set referralCode(value: i32) {
    this.set("referralCode", Value.fromI32(value));
  }
}

export class LiquidationCallEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidationCallEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidationCallEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidationCallEvent", id.toString(), this);
  }

  static load(id: string): LiquidationCallEvent | null {
    return store.get("LiquidationCallEvent", id) as LiquidationCallEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get collateralAsset(): Bytes {
    let value = this.get("collateralAsset");
    return value.toBytes();
  }

  set collateralAsset(value: Bytes) {
    this.set("collateralAsset", Value.fromBytes(value));
  }

  get debtAsset(): Bytes {
    let value = this.get("debtAsset");
    return value.toBytes();
  }

  set debtAsset(value: Bytes) {
    this.set("debtAsset", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get debtToCover(): BigInt {
    let value = this.get("debtToCover");
    return value.toBigInt();
  }

  set debtToCover(value: BigInt) {
    this.set("debtToCover", Value.fromBigInt(value));
  }

  get liquidatedCollateralAmount(): BigInt {
    let value = this.get("liquidatedCollateralAmount");
    return value.toBigInt();
  }

  set liquidatedCollateralAmount(value: BigInt) {
    this.set("liquidatedCollateralAmount", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get receiveAToken(): boolean {
    let value = this.get("receiveAToken");
    return value.toBoolean();
  }

  set receiveAToken(value: boolean) {
    this.set("receiveAToken", Value.fromBoolean(value));
  }
}

export class PausedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PausedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PausedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PausedEvent", id.toString(), this);
  }

  static load(id: string): PausedEvent | null {
    return store.get("PausedEvent", id) as PausedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class RebalanceStableBorrowRateEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RebalanceStableBorrowRateEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RebalanceStableBorrowRateEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RebalanceStableBorrowRateEvent", id.toString(), this);
  }

  static load(id: string): RebalanceStableBorrowRateEvent | null {
    return store.get(
      "RebalanceStableBorrowRateEvent",
      id
    ) as RebalanceStableBorrowRateEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class RepayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RepayEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RepayEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RepayEvent", id.toString(), this);
  }

  static load(id: string): RepayEvent | null {
    return store.get("RepayEvent", id) as RepayEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get repayer(): Bytes {
    let value = this.get("repayer");
    return value.toBytes();
  }

  set repayer(value: Bytes) {
    this.set("repayer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveDataUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReserveDataUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveDataUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveDataUpdatedEvent", id.toString(), this);
  }

  static load(id: string): ReserveDataUpdatedEvent | null {
    return store.get(
      "ReserveDataUpdatedEvent",
      id
    ) as ReserveDataUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    return value.toBigInt();
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get stableBorrowRate(): BigInt {
    let value = this.get("stableBorrowRate");
    return value.toBigInt();
  }

  set stableBorrowRate(value: BigInt) {
    this.set("stableBorrowRate", Value.fromBigInt(value));
  }

  get variableBorrowRate(): BigInt {
    let value = this.get("variableBorrowRate");
    return value.toBigInt();
  }

  set variableBorrowRate(value: BigInt) {
    this.set("variableBorrowRate", Value.fromBigInt(value));
  }

  get liquidityIndex(): BigInt {
    let value = this.get("liquidityIndex");
    return value.toBigInt();
  }

  set liquidityIndex(value: BigInt) {
    this.set("liquidityIndex", Value.fromBigInt(value));
  }

  get variableBorrowIndex(): BigInt {
    let value = this.get("variableBorrowIndex");
    return value.toBigInt();
  }

  set variableBorrowIndex(value: BigInt) {
    this.set("variableBorrowIndex", Value.fromBigInt(value));
  }
}

export class ReserveUsedAsCollateralDisabledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReserveUsedAsCollateralDisabledEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveUsedAsCollateralDisabledEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveUsedAsCollateralDisabledEvent", id.toString(), this);
  }

  static load(id: string): ReserveUsedAsCollateralDisabledEvent | null {
    return store.get(
      "ReserveUsedAsCollateralDisabledEvent",
      id
    ) as ReserveUsedAsCollateralDisabledEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class ReserveUsedAsCollateralEnabledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReserveUsedAsCollateralEnabledEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveUsedAsCollateralEnabledEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveUsedAsCollateralEnabledEvent", id.toString(), this);
  }

  static load(id: string): ReserveUsedAsCollateralEnabledEvent | null {
    return store.get(
      "ReserveUsedAsCollateralEnabledEvent",
      id
    ) as ReserveUsedAsCollateralEnabledEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }
}

export class SwapEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SwapEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SwapEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SwapEvent", id.toString(), this);
  }

  static load(id: string): SwapEvent | null {
    return store.get("SwapEvent", id) as SwapEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get rateMode(): BigInt {
    let value = this.get("rateMode");
    return value.toBigInt();
  }

  set rateMode(value: BigInt) {
    this.set("rateMode", Value.fromBigInt(value));
  }
}

export class UnpausedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnpausedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnpausedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnpausedEvent", id.toString(), this);
  }

  static load(id: string): UnpausedEvent | null {
    return store.get("UnpausedEvent", id) as UnpausedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class WithdrawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawEvent", id.toString(), this);
  }

  static load(id: string): WithdrawEvent | null {
    return store.get("WithdrawEvent", id) as WithdrawEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class AddressSetEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddressSetEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddressSetEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddressSetEvent", id.toString(), this);
  }

  static load(id: string): AddressSetEvent | null {
    return store.get("AddressSetEvent", id) as AddressSetEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }

  get hasProxy(): boolean {
    let value = this.get("hasProxy");
    return value.toBoolean();
  }

  set hasProxy(value: boolean) {
    this.set("hasProxy", Value.fromBoolean(value));
  }
}

export class ConfigurationAdminUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ConfigurationAdminUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConfigurationAdminUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConfigurationAdminUpdatedEvent", id.toString(), this);
  }

  static load(id: string): ConfigurationAdminUpdatedEvent | null {
    return store.get(
      "ConfigurationAdminUpdatedEvent",
      id
    ) as ConfigurationAdminUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class EmergencyAdminUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EmergencyAdminUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EmergencyAdminUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EmergencyAdminUpdatedEvent", id.toString(), this);
  }

  static load(id: string): EmergencyAdminUpdatedEvent | null {
    return store.get(
      "EmergencyAdminUpdatedEvent",
      id
    ) as EmergencyAdminUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class LendingPoolCollateralManagerUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolCollateralManagerUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolCollateralManagerUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolCollateralManagerUpdatedEvent", id.toString(), this);
  }

  static load(id: string): LendingPoolCollateralManagerUpdatedEvent | null {
    return store.get(
      "LendingPoolCollateralManagerUpdatedEvent",
      id
    ) as LendingPoolCollateralManagerUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class LendingPoolConfiguratorUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolConfiguratorUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolConfiguratorUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolConfiguratorUpdatedEvent", id.toString(), this);
  }

  static load(id: string): LendingPoolConfiguratorUpdatedEvent | null {
    return store.get(
      "LendingPoolConfiguratorUpdatedEvent",
      id
    ) as LendingPoolConfiguratorUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class LendingPoolUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolUpdatedEvent", id.toString(), this);
  }

  static load(id: string): LendingPoolUpdatedEvent | null {
    return store.get(
      "LendingPoolUpdatedEvent",
      id
    ) as LendingPoolUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class LendingRateOracleUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingRateOracleUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingRateOracleUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingRateOracleUpdatedEvent", id.toString(), this);
  }

  static load(id: string): LendingRateOracleUpdatedEvent | null {
    return store.get(
      "LendingRateOracleUpdatedEvent",
      id
    ) as LendingRateOracleUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class MarketIdSetEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketIdSetEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketIdSetEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketIdSetEvent", id.toString(), this);
  }

  static load(id: string): MarketIdSetEvent | null {
    return store.get("MarketIdSetEvent", id) as MarketIdSetEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newMarketId(): string {
    let value = this.get("newMarketId");
    return value.toString();
  }

  set newMarketId(value: string) {
    this.set("newMarketId", Value.fromString(value));
  }
}

export class OwnershipTransferredEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OwnershipTransferredEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnershipTransferredEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnershipTransferredEvent", id.toString(), this);
  }

  static load(id: string): OwnershipTransferredEvent | null {
    return store.get(
      "OwnershipTransferredEvent",
      id
    ) as OwnershipTransferredEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class PriceOracleUpdatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PriceOracleUpdatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceOracleUpdatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceOracleUpdatedEvent", id.toString(), this);
  }

  static load(id: string): PriceOracleUpdatedEvent | null {
    return store.get(
      "PriceOracleUpdatedEvent",
      id
    ) as PriceOracleUpdatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class ProxyCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProxyCreatedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProxyCreatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProxyCreatedEvent", id.toString(), this);
  }

  static load(id: string): ProxyCreatedEvent | null {
    return store.get("ProxyCreatedEvent", id) as ProxyCreatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class ApprovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ApprovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ApprovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ApprovalEvent", id.toString(), this);
  }

  static load(id: string): ApprovalEvent | null {
    return store.get("ApprovalEvent", id) as ApprovalEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class BorrowAllowanceDelegatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BorrowAllowanceDelegatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BorrowAllowanceDelegatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BorrowAllowanceDelegatedEvent", id.toString(), this);
  }

  static load(id: string): BorrowAllowanceDelegatedEvent | null {
    return store.get(
      "BorrowAllowanceDelegatedEvent",
      id
    ) as BorrowAllowanceDelegatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TransferEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferEvent", id.toString(), this);
  }

  static load(id: string): TransferEvent | null {
    return store.get("TransferEvent", id) as TransferEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}
